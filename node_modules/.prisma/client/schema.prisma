// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int            @id @default(autoincrement())
  email        String         @unique
  name         String
  password     String
  googleId     String?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @default(now()) @updatedAt
  deletedAt    DateTime?
  // Roles     Roles?    @relation(fields: [rolesId], references: [id], onDelete: Cascade)
  rolesId      Int            @default(2)
  CartAdd      Cart[]
  Order        Order[]
  OrderProduct OrderProduct[]
}

model Roles {
  id               Int                @id @default(autoincrement())
  rolename         String
  Rolespermissions RolesPermissions[]
}

model Permissions {
  id               Int                @id @default(autoincrement())
  permissionName   String
  createdAt        DateTime           @default(now())
  RolesPermissions RolesPermissions[]
}

model RolesPermissions {
  id            Int          @id @default(autoincrement())
  Roles         Roles?       @relation(fields: [rolesId], references: [id], onDelete: Cascade)
  rolesId       Int?
  Permissions   Permissions? @relation(fields: [permissionsId], references: [id], onDelete: Cascade)
  permissionsId Int?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @default(now()) @updatedAt
}

model Product {
  id              Int               @id @default(autoincrement())
  ProductName     String
  description     String?
  image           String            @db.LongText
  price           Int               @default(0)
  quantity        Int
  createdAt       DateTime?         @default(now())
  updatedAt       DateTime?         @default(now())
  deletedAt       DateTime?
  ProductCategory ProductCategory[]
  Order           Order[]
  OrderProduct    OrderProduct[]
}

model Categories {
  id              Int               @id @default(autoincrement())
  name            String
  createdAt       DateTime?         @default(now())
  updatedAt       DateTime?         @default(now())
  deletedAt       DateTime?
  ProductCategory ProductCategory[]
}

model ProductCategory {
  productId    Int
  categoriesId Int
  Categories   Categories? @relation(fields: [categoriesId], references: [id])
  Product      Product?    @relation(fields: [productId], references: [id])
  createdAt    DateTime?   @default(now())
  updatedAt    DateTime?   @default(now())
  deletedAt    DateTime?

  @@id([productId, categoriesId])
}

model Cart {
  id        Int      @id @default(autoincrement())
  Quantity  Int
  userId    Int
  productId Int
  total     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  deleted Boolean @default(false)
  User    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Order {
  id           Int            @id @default(autoincrement())
  userId       Int
  isOrdered    Boolean        @default(false)
  totalPrice   Int            @default(0)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  deletedAt    DateTime?
  deleted      Boolean        @default(false)
  User         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  OrderProduct OrderProduct[]
  Product      Product?       @relation(fields: [productId], references: [id])
  productId    Int?

  @@unique([id, userId])
}

model OrderProduct {
  id        Int     @id @default(autoincrement())
  Order     Order   @relation(fields: [orderId], references: [id])
  orderId   Int
  userId    Int
  productId Int
  quantity  Int     @default(1)
  Product   Product @relation(fields: [productId], references: [id])
  User      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}
